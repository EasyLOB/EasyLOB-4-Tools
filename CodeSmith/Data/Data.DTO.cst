<%@ CodeTemplate Language="C#" TargetLanguage="C#" Src="..\CodeSmithHelper.cs" Inherits="XCodeSmith.CodeSmithHelper" Debug="False" Description="" %>

<%@ Property Name="Application" Type="String" Category="Application" Description="Application" %>
<%@ Property Name="Namespace" Type="String" Category="Application" Description="Namespace [using Application.*]" %>

<%@ Property Name="Culture" Type="XCodeSmith.Cultures" Category="Context" Description="Culture for Plural Rules" %>

<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Database" Description="Table" %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="System.Collections" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Collections.Generic" %>
<%
if (SourceTable.PrimaryKey == null) {
    throw new ApplicationException("SourceTable does not contain a primary key.");
}

string tableName = TableName(SourceTable.FullName);
string className = ClassName(SourceTable.FullName, Culture);
string objectName = ObjectName(SourceTable.FullName, Culture);

// Associations

Dictionary<string, int> associations123 = new Dictionary<string, int>();
foreach (TableKeySchema fkTable in SourceTable.ForeignKeys) {
    string pkClassName = ClassName(fkTable.PrimaryKeyTable.FullName, Culture);

    Dictionary123(associations123, pkClassName);
}
%>
using EasyLOB;
using EasyLOB.Data;
using EasyLOB.Library;
using System;
using System.Collections.Generic;

namespace <%= Namespace %>
{
    public partial class <%= className %>DTO : ZDTOModel<<%= className %>DTO, <%= className %>>
    {
        #region Properties
<%  foreach (ColumnSchema column in SourceTable.Columns) {
        bool isNullable = column.AllowDBNull; %>

        public virtual <%= GetType(column) %> <%= PropertyName(column.Name) %> { get; set; }
<%  } %>

        #endregion Properties
<%  if (SourceTable.ForeignKeys.Count > 0) { %>

        #region Associations (FK)
<%      Dictionary1(associations123);
        foreach (TableKeySchema fkTable in SourceTable.ForeignKeys) {
            string fkClassName = ClassName(fkTable.ForeignKeyTable.FullName, Culture);
            ColumnSchema fkColumn = fkTable.ForeignKeyMemberColumns[0];
            string fkPropertyName = PropertyName(fkColumn.Name);

            string pkClassName = ClassName(fkTable.PrimaryKeyTable.FullName, Culture);
            ColumnSchema pkColumn = fkTable.PrimaryKeyMemberColumns[0];
            string pkPropertyName = PropertyName(pkColumn.Name);

            string pkClassName2 = pkClassName == className ? pkClassName + "X" : pkClassName;

            string x = "";
            if (associations123.ContainsKey(pkClassName)) {
                x = (++associations123[pkClassName]).ToString();
            } %>

        public virtual string <%= pkClassName2 %><%= x %>LookupText { get; set; } // <%= fkPropertyName %>
<%      } %>

        #endregion Associations (FK)
<%  } %>

        #region Methods

        public <%= className %>DTO()
        {
            OnConstructor();
        }

        public <%= className %>DTO(IZDataModel dataModel)
        {
            FromData(dataModel);
        }

        #endregion Methods
    }
}
